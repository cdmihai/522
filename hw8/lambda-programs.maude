mod LAMBDA-PROGRAMS is including LAMBDA-SYNTAX .
  ops id conditional zeroer mZeroer mZeroerBody mCombinator : -> Exp .

  eq id = /\ x : nat . x .
  eq conditional = cond(zero?(succ(0')), 0', zero?(succ(0'))) .
  
  eq zeroer = /\ f : nat -> nat . /\ n : nat . cond(zero?(n), n, f pred(n)) .

  eq mZeroer = m f : nat -> nat . /\ n : nat . cond(zero?(n), n, f pred(n)) .

  eq mZeroerBody = /\ n : nat . cond(zero?(n), n, f pred(n)) .
  eq mCombinator = /\ f : nat -> nat . /\ n : nat . m n : nat -> f .

endm