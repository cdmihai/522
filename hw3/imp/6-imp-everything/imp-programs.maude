mod IMP-PROGRAMS is including IMP-SYNTAX .
  ops sumPgm collatzPgm countPrimesPgm : -> Pgm .
  ops collatzStmt multiplicationStmt primalityStmt : -> Stmt .
  eq sumPgm = (
     int n ;
     n = 100 ;
     while (!(n <= 0)) {
       s = s + n ;
       n = n + -1 ;
     }    ) .

  eq collatzStmt = (
     while (!(n <= 1)) {
       s = s + 1 ;
       int q, r ;
       q = n / 2 ;
       r = q + q + 1 ;
       if (r <= n) { n = n + n + n + 1 ; } else { n = q ; }
     }     ) .

  eq collatzPgm = (
     int m ;
     m = 10 ;
     while (!(m <= 2)) {
       int n ;
       n = m ;
       m = m + -1 ;
       collatzStmt
     }     ) .

  eq multiplicationStmt = (        --- fast multiplication (base 2) algorithm
     z = 0 ;
     while (!(x <= 0)) {
       int q, r ;
       q = x / 2 ;
       r = q + q + 1 ;
       if (r <= x) { z = z + y ; } else {}
       x = q ;
       y = y + y ;
     }     ) .

  eq primalityStmt = (
     int i, q ;
     i = 2 ;
     q = n / i ;
     t = 1 ;
     while (i <= q && 1 <= t) {
       int x, y, z ;
       x = i ;
       y = q ;
       multiplicationStmt
       if (n <= z) { t = 0 ; } else { i = i + 1 ;  q = n / i ; }
     }     ) .

  eq countPrimesPgm = (
     int m, n, t ;
     m = 10 ;  n = 2 ;
     while (n <= m) {
       primalityStmt
       if (1 <= t) { s = s + 1 ; } else {}
       n = n + 1 ;
     }     ) .

***<new>  Programs with IO
  op sumIOPgm : -> Pgm .
  eq sumIOPgm = (
     int m, n ;
     n = read() ;
     while (m <= n) {
       print(m) ;
       s = s + m ;
       m = m + 1 ;
     }
     print(s) ;    ) .

  op whileIOPgm : -> Pgm .
  eq whileIOPgm = (
     s = 0 ;
     while (!(read() <= 0)) {
       s = s + read() ;
	 }
     print(s) ;    ) .

  op nondetIOStmt : -> Stmt .
  eq nondetIOStmt = (
       print(read()
             / (read()
                / read())) ;     ) .
***</new>

*** <new> Programs with increment
  op sum++Pgm : -> Pgm .
  eq sum++Pgm = (
     int m, n ;
     n = 2 ;
     while (++ m <= n) {
     s = s + m ;
     }     ) .

  op nondet++Pgm : -> Pgm .
  eq nondet++Pgm = (
     x = 1 ;
     x = ++ x / (++ x / x) ;
  ) .
*** </new>

*** <new> Programs which terminate abruptly
  op sumHaltPgm : -> Pgm .
  eq sumHaltPgm = (
     int m, n ;
     n = 2 ;  --- replace 100 by 2 in big-step SOS with abrupt termination
     while (true) {
       if (m <= n) {
         s = s + m ;
         m = m + 1 ;
       }
       else { halt ; }
     }     ) .

  op sumDivByZeroPgm : -> Pgm .
  eq sumDivByZeroPgm = (
     int m, n ;
     n = 2 ;  --- replace 100 by 2 in big-step SOS with abrupt termination
     while (true) {
       if (m <= n) {
         s = s + m ;
         m = m + 1 ;
       }
       else { s = s / (n / m) ; }
     }     ) .
*** </new>

*** <new> Programs making use of spawn
  op sumSpawnPgm : -> Pgm .
  eq sumSpawnPgm = (
     int m, n ;
     n = 1 ;   --- 100 may be too large for some semantics
     while (m <= n) {
       spawn {s = s + m ;}
       m = m + 1 ;
     }     ) .

  op spawnPgm : -> Pgm .
  eq spawnPgm = (
     {
        spawn {x = x + 1 ;}
        spawn {x = x + 10 ;}
     } --- such grouping can appear, e.g., when unrolling loops
     x = x + 100 ;     ) .
*** </new>

*** <new> Programs testing shadowing
  op shadow1Stmt : -> Stmt .
  eq shadow1Stmt = {
     int x ;
     x = 1 ;
     y = x ;
     int x ;
     x = 2 ;
     z = x ;    } .

  op shadow2Stmt : -> Stmt .
  eq shadow2Stmt = {
     int x ;
     x = 1 ;
     { int x ;
       x = 2 ;
       z = x ; }
     y = x ;    } .
*** </new>

endm