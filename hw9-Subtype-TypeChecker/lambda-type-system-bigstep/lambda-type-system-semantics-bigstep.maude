mod LAMBDA-TYPE-SYSTEM-CONFIGURATIONS-BIGSTEP is including LAMBDA-SYNTAX + LAMBDA-TYPES + TYPE-ASSIGNMENT .
  sort Configuration .
  op <_,_> : Var TypeAssignment -> Configuration .
  op <_,_> : Exp TypeAssignment -> Configuration .
  op   <_> : Type -> Configuration .
endm

---TODO: extract Record code into separate entity
mod LAMBDA-TYPE-SYSTEM-BIGSTEP is including LAMBDA-TYPE-SYSTEM-CONFIGURATIONS-BIGSTEP .
  var X : Id .  
  var TA : TypeAssignment .  
  var S T T1 T2 : Type . 
  var E E1 E2 : Exp .

 rl < 0', TA > => < nat > .
 rl < false', TA > => < bool > .
 rl < true', TA > => < bool > .

 crl < succ(E), TA > => < nat > if < E , TA > => < nat > .
 crl < pred(E), TA > => < nat > if < E , TA > => < nat > .
 
 crl < zero?(E), TA > => < bool > if < E, TA > => < nat > .

 ---instead of having to tell cond the concrete type of its branches, it can actually infer this information itself
 crl < cond(E, E1, E2), TA > => < bool -> T -> T -> T > if < E, TA > => < bool > /\ < E1, TA > => < T > /\ < E2, TA > => < T > .

 rl < X, TA > => < TA(X) > .
crl < /\ X : S . E, TA > => < S -> T > if < E, TA[S / X] > => < T > .  
crl < E1 E2, TA > => < S > if < E1, TA > => < T1 -> S > /\ < E2, TA > => < T2 > /\ T2 < T1 .


--- field access in record
var RS RST : Set' .
var STR : String .

eq [ STR = E ; RS ] . STR = E .

---rules for typechecking a record: iterate over each field and get its type
op typify : Set' TypeAssignment Set' -> Set' .

crl typify(STR = E ; RS, TA, RST) => typify( RS, TA, (RST add STR : T )) if < E, TA > => < T > .
rl typify(none, TA, RST) => RST .

crl < [ RS ], TA > => < { RST } > if typify(RS, TA, none) => RST .

endm