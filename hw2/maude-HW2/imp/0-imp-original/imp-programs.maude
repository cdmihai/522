mod IMP-PROGRAMS is including IMP-SYNTAX .
  ops boolLE1, boolLE2, boolAnd1, boolAnd2, divzDiv, divzIf1, divzIf2, divzSum1, divzSum2, divzLoopCond, divzLoopIf, sumPgm collatzPgm countPrimesPgm : -> Pgm .
  ops collatzStmt multiplicationStmt primalityStmt : -> Stmt .
  eq sumPgm = (
     int n, s ;
     n = 100 ;
     while (!(n <= 0)) {
       s = s + n ;
       n = n + -1 ;
     }    ) .

  eq collatzStmt = (
     while (!(n <= 1)) {
       s = s + 1 ;  q = n / 2 ;  r = q + q + 1 ;
       if (r <= n) { n = n + n + n + 1 ; } else { n = q ; }
     }     ) .

  eq collatzPgm = (
     int m, n, q, r, s ;
     m = 10 ;
     while (!(m <= 2)) {
       n = m ;
       m = m + -1 ;
       collatzStmt
     }     ) .

  eq multiplicationStmt = (        --- fast multiplication (base 2) algorithm
     z = 0 ;
     while (!(x <= 0)) {
       q = x / 2 ;
       r = q + q + 1 ;
       if (r <= x) { z = z + y ; } else {}
       x = q ;
       y = y + y ;
     }     ) .

  eq primalityStmt = (
     i = 2 ;  q = n / i ;  t = 1 ;
     while (i <= q && 1 <= t) {
       x = i ;
       y = q ;
       multiplicationStmt
       if (n <= z) { t = 0 ; } else { i = i + 1 ;  q = n / i ; }
     }     ) .

  eq countPrimesPgm = (
     int i, m, n, q, r, s, t, x, y, z ;
     m = 10 ;  n = 2 ;
     while (n <= m) {
       primalityStmt
       if (1 <= t) { s = s + 1 ; } else {}
       n = n + 1 ;
     }     ) .
     
   eq divzLoopIf = (
     int n, s ;
     n = 100 ;
     while (!(n <= 0)) {
       if (1 <= 2) { s = s / 0 ; } else { }
       n = n + -1 ;
     }    ) .  
     
    eq divzLoopCond = (
   	int n, s ;
   	n = 5 ;
   	while (!(n / 0 <= 0)) {
   		n = n + -1 ; 
   	}
   ) . 
   
   eq divzSum1 = (
   	int a, b, c ;
   	a = 1 ;
   	b = 1 ;
   	b = b + (a / c) ;
   ) . 
   
   eq divzSum2 = (
   	int a, b, c ;
   	a = 1 ;
   	b = 1 ;
   	b = (a / c) + b ;
   ) . 
   
   eq divzDiv = (
   	int b, c ;
   	b = 1 ;
   	b = ((b / c) / 1) + b ;
   ) . 
   
   eq divzIf1 = (
   	int a, b, c ;
   	a = 1 ;
   	
   	if (a / c <= 2) { b = 0 ;} else {b = 1 ;}
   ) .
   
   eq divzIf2 = (
   	int a, b, c ;
   	a = 1 ;
   	
   	if (2 <= 1) { b = 0 ;} else {b = a / c ;}
   ) .
   
   eq boolLE1 = (
   	int a, b, c ;
   	a = 1 ;
   	
   	if (a <= (a / 0)) { b = 0 ;} else {b = 1 ;}
   ) . 	
   
   eq boolLE2 = (
   	int a, b, c ;
   	a = 1 ;
   	
   	if ((a / 0) <= a) { b = 0 ;} else {b = 1 ;}
   ) . 	
   eq boolAnd1 = (
   	int a, b ;
   	a = 1 ;
   	
   	if (((a / 0) <= a) && (1 <= 2)) { b = 0 ;} else {b = 1 ;}
   ) . 	
   eq boolAnd2 = (
   	int a, b ;
   	a = 1 ;
   	
   	if ((1 <= 2) && ((a / 0) <= a)) { b = 0 ;} else {b = 1 ;}
   ) . 	
   
   
endm
