mod LAMBDA-CONFIGURATIONS-BIGSTEP is including LAMBDA-SYNTAX .
  sort Configuration .
  op   <_> : Var -> Configuration .
  op   <_> : Exp -> Configuration .
  op   <_> : Val -> Configuration .
endm

mod LAMBDA-SEMANTICS-BIGSTEP is including LAMBDA-CONFIGURATIONS-BIGSTEP .
  
  var X Y Z : Var . 
  var E F C E1 E2 : Exp .
  var S T : Type .
  var V V' : Val .

--- This is the closest I came to the concept of values: wrap and freeze the constructs deemed as values in a "Value" wrapper
  rl < 0' > => < zeroVal > .
  rl < true' > => < trueVal > .
  rl < false' > => < falseVal > .
  rl < succ(E) > => < nonZeroVal(succ(E)) > .
  rl < /\ X : T . E > => < lambdaVal(X, T, E) > .

  crl < succ(E) > => < succ(V) > if < E > => < V > .

  crl < pred(E) > => < F > if < E > => < nonZeroVal(succ(F)) > .
  crl < pred(E) > => < 0' > if < E > => < zeroVal > .

  crl < zero?(E) > => < true' > if < E > => < zeroVal > .
  crl < zero?(E) > => < false' > if < E > => < nonZeroVal(E) > .

  crl < cond(C, E1, E2) > => < V > if < C > => < true' > /\ < E1 > => < V > .
  crl < cond(C, E1, E2) > => < V > if < C > => < false' > /\ < E2 > => < V > .

  --- call by value. E2 needs to be evaluated before the substitution is performed
  crl < E1 E2 > => < V' > if < E1 > => < lambdaVal(X, T, E)  > /\ < E2 > => < V > /\ < substitute(E, V, X) > => < V' > .

  crl < m X : T . E > => < V > if < substitute(E, m X : T . E, X) > => < V > .

  --- did not figure out how to use the mu combinator in a similiar fashion with the Y combinator. Thus I added one more rule to define application on a mu combinator. 
  crl < E1 E2 > => < V > if < E1 > => < m X : T . /\ Y : S . F > /\ < substitute(F, E2, Y) > => < V > .

endm