mod LAMBDA-CONFIGURATIONS-SMALLSTEP is including LAMBDA-SYNTAX .
  sorts Configuration ExtendedConfiguration .
  subsort Configuration < ExtendedConfiguration .
  op   <_> : Var -> Configuration .
  op   <_> : Exp -> Configuration .
  op   <_> : Val -> Configuration .
  op o_ : Configuration -> ExtendedConfiguration [prec 80] .   --- one step
  op *_ : Configuration -> ExtendedConfiguration [prec 80] .   --- all steps
  var Cfg Cfg' : Configuration .
 crl * Cfg => * Cfg' if o Cfg => Cfg' .
endm

mod LAMBDA-SEMANTICS-SMALLSTEP is including LAMBDA-CONFIGURATIONS-SMALLSTEP .
  var X Y Z : Var . 
  var E F F' C C' E1 E2 E' : Exp .
  var S T : Type .
  var V : Val .

  rl o < 0' > => < zeroVal > .
  rl o < true' > => < trueVal > .
  rl o < false' > => < falseVal > .
  rl o < succ(E) > => < nonZeroVal(succ(E)) > .
  rl o < /\ X : T . E > => < lambdaVal(X, T, E) > .

  rl o < zero?(zeroVal) > => < true' > .
  rl o < zero?(nonZeroVal(succ(E))) > => < false' > . 

  rl o < pred(zeroVal) > => < 0' > .
  rl o < pred(nonZeroVal(succ(E))) > => < E > .

  rl o < cond(trueVal, E1, E2 ) > => < E1 > .
  rl o < cond(falseVal, E1, E2 ) > => < E2 > .

  ---Call by value. Application arguments should have been reduced to values
  rl < lambdaVal(X, T, E) V > => < substitute(E, V, X) > .

  rl < m X : T . E > => < substitute(E, m X : T . E , X) > .

  crl o < succ(E) > => < succ(E') > if o < E > => < E' > .
  crl o < pred(E) > => < pred(E') > if o < E > => < E' > .
  crl o < zero?(E) > => < zero?(E') > if o < E > => < E' > .

  crl o < cond(C, E1, E2) > => < cond(C', E1, E2) > if o < C > => < C' > .

  --- Call by value. Evaluate the arguments before application
  crl o < F E > => < F E' > if o < E > => < E' > .

  crl o < F E > => < F' E > if o < F > => < F' > .

 ---crl o < X,Sigma > => < Sigma(X),Sigma > if Sigma(X) =/=Bool undefined .

 

endm